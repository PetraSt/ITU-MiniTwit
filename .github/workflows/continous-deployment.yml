---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
  # allow manual triggers for now too
  workflow_dispatch:
    manual: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install flake8
          pip install bandit
          pip install black
          pip install -r ./ITU_MiniTwit/requirements.txt
          pip install -r ./Minitwit-api/requirements.txt

      - name: Run Black
        run: |
          black .
        continue-on-error: false

      - name: Run Flake8
        run: |
          flake8
        continue-on-error: true

      - name: Run Bandit
        run: |
          bandit -r . --configfile bandit.yml --severity=high
        continue-on-error: true

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push minitwitimage
        uses: docker/build-push-action@v2
        with:
          context: ./ITU_MiniTwit
          file: ./ITU_MiniTwit/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwitimage:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitimage:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitimage:webbuildcache,mode=max

      #- name: Build and push sqlite database
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: .
      #    file: ./Dockerfile-sqlite
      #    push: true
      #    tags: ${{ secrets.DOCKER_USERNAME }}/sqliteimage:latest
      #    cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/sqliteimage:sqlitebuildcache
      #    cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/sqliteimage:sqlitebuildcache,mode=max

      - name: Build and push minitwit-api
        uses: docker/build-push-action@v2
        with:
          context: ./Minitwit-api
          file: ./Minitwit-api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/apiminitwit:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/apiminitwit:webbuildcacheapi
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/apiminitwit:webbuildcacheapi,mode=max

      #- name: Test minitwit
      #  run: |
      #    docker build -t $DOCKER_USERNAME/minitwittestimage -f Dockerfile-minitwit-tests .
      #    yes 2>/dev/null | docker-compose up -d
      #    docker run --rm --network=itu-minitwit-network $DOCKER_USERNAME/minitwittestimage
      #  env:
      #    DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/do_ssh_key
          chmod 600 ~/.ssh/do_ssh_key
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
        run: >
          ssh $SSH_USER@$SSH_HOST
          -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no
          '/minitwit/deploy.sh'
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}