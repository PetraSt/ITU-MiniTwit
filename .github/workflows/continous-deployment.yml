---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
  # allow manual triggers for now too
  workflow_dispatch:
    manual: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install flake8
          pip install bandit
          pip install black
          pip install -r ./ITU_MiniTwit/requirements.txt
          pip install -r ./Minitwit-api/requirements.txt

      - name: Run Black
        run: |
          black .
        continue-on-error: false

      - name: Show Black changes
        run: git diff
        
      - name: Run Flake8
        run: |
          flake8
        continue-on-error: false

      - name: Run Bandit
        run: |
          bandit -r . --configfile bandit.yml --severity=high
        continue-on-error: false

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push minitwitimage
        uses: docker/build-push-action@v2
        with:
          context: ./ITU_MiniTwit
          file: ./ITU_MiniTwit/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwitimage:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitimage:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitimage:webbuildcache,mode=max

      - name: Run MiniTwit test
        run: |
          docker build -t $DOCKER_USERNAME/minitwittest -f ./ITU_MiniTwit/TestingDockerfile ./ITU_MiniTwit
          docker run --rm $DOCKER_USERNAME/minitwittest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        continue-on-error: true

      - name: Build and push postgres database
        uses: docker/build-push-action@v2
        with:
          context: ./Database
          file: ./Database/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwitdb:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitdb:postgresbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitdb:postgresbuildcache,mode=max

      - name: Build and push minitwit-api
        uses: docker/build-push-action@v2
        with:
          context: ./Minitwit-api
          file: ./Minitwit-api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/apiminitwit:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/apiminitwit:webbuildcacheapi
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/apiminitwit:webbuildcacheapi,mode=max

      - name: Build and push grafana
        uses: docker/build-push-action@v2
        with:
          context: ./grafana
          file: ./grafana/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/grafana:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/grafana:webbuildcacheapi
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/grafana:webbuildcacheapi,mode=max

      - name: Build and push prometheus
        uses: docker/build-push-action@v2
        with:
          context: ./prometheus
          file: ./prometheus/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/prometheus:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/prometheus:webbuildcacheapi
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/prometheus:webbuildcacheapi,mode=max

      - name: Build and push filebeat
        uses: docker/build-push-action@v2
        with:
          context: ./filebeat
          file: ./filebeat/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/filebeat:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/filebeat:filebeatbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/filebeat:filebeatbuildcache,mode=max
      
      - name: Build and push nginx
        uses: docker/build-push-action@v2
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nginx:nginxbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nginx:nginxbuildcache,mode=max

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/do_ssh_key
          chmod 600 ~/.ssh/do_ssh_key
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
        run: >
          ssh $SSH_USER@$SSH_HOST
          -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no
          '/minitwit/deploy.sh'
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up LaTeX
        uses: xu-cheng/latex-action@v2
        with:
          latex-version: 'TeXLive'
          
      - name: Compile LaTeX to PDF
        run: |
          cd report
          pdflatex -interaction=nonstopmode -halt-on-error main.tex

      - name: Move PDF to report directory
        run: |
          mv report/main.pdf MSc_group_t.pdf

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v2
        with:
          name: report-pdf
          path: MSc_group_t.pdf