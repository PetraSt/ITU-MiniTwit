# THIS IS A LOCAL 'docker-compose' FILE FOR LOCAL BUILDS AND TESTS
version: '3'
services:
  postgres:
    build: ./Database
    container_name: DB-postgres
    restart: always
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - main


  adminer:
    image: adminer
    container_name: DB-postgres-interface
    restart: always
    ports:
      - 8082:8080
    networks:
      - main

  api:
    build: ./Minitwit-api
    container_name: API
    depends_on:
      - postgres
    ports:
      - 8080:8080
    networks:
      - main

  app:
    build: ./ITU_MiniTwit
    container_name: APP
    command: >
      sh -c "
            python manage.py runserver 0.0.0.0:8000"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: DB-postgres
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 8000:8000
    links:
      - postgres
    networks:
      - main

  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.2.0"
    environment:
        - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
        - "discovery.type=single-node"
    volumes:
        - elk-elasticsearch-volume:/usr/share/elasticsearch/data
    networks:
        - elk

  kibana:
    image: "docker.elastic.co/kibana/kibana:7.2.0"
    environment:
        elasticsearch.hosts: '["http://elasticsearch:9200"]'
    networks:
        - elk

  filebeat:
    image: "docker.elastic.co/beats/filebeat:7.2.0"
    user: root
    volumes:
        - ${ELK_DIR}/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
        - /var/lib/docker:/var/lib/docker:ro
        - /var/run/docker.sock:/var/run/docker.sock
    networks:
        - elk
          
  nginx: 
    image: nginx
    ports:
      - 9200:9200
      - 5000:5601
      - 8881:8881
      - 8882:8882
    networks:
      - elk
    volumes:
      - type: bind
        source: ${ELK_DIR}/nginx.conf
        target: /etc/nginx/nginx.conf
      - type: bind
        source: ${ELK_DIR}/.htpasswd
        target: /etc/nginx/.htpasswd

  prometheus:
    # built on apple sillicon, needs to be rebuild to run in droplet
    image: szymongalecki/prometheus
    container_name: prometheus
    networks:
      - main

  grafana:
    # correct architecture, runs in droplet, can be forked
    image: szymongalecki/grafana
    container_name: grafana
    ports:
      - "5003:3000"   
    networks:
      - main

volumes:
  postgres_volume:
  elk-elasticsearch-volume:

networks:
  main:
    name: itu-minitwit-network
  elk:
    name: elk-network
