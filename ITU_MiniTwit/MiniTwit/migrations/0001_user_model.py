# Generated by Django 4.1.5 on 2023-03-14 21:14


import django.contrib.auth.models
from django.db import connections, migrations, models
import django.utils.timezone

def copy_users(apps, schema_editor):
    # Get a connection to the old database
    old_db = connections['old_db']

    # Execute a SELECT statement to retrieve the data from the old table
    with old_db.cursor() as cursor:
        cursor.execute("SELECT * FROM user")

        # Iterate over the rows and insert them into the new table
        for row in cursor.fetchall():
            #print(row)
            newUser = apps.get_model('MiniTwit', 'User')

            # Copy the relevant data from the old table to the new table
            new_user = newUser()

            new_user.id = row[0]
            new_user.password = row[3]
            new_user.email = row[2]
            new_user.username = row[1]
            new_user.first_name = row[1].split()[0]  # first name is the first word in the username
            if len(row[1].split()) > 1:
                new_user.last_name = row[1].split()[1]
            else:
                new_user.last_name = ''
            # last name is the second word in the username    
            new_user.is_superuser = False
            new_user.is_staff = False
            new_user.is_active = True
            new_user.date_joined = django.utils.timezone.now()
            new_user.last_login = django.utils.timezone.now()

            new_user.save()

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.TextField(max_length=50, unique=True)),
                ('email', models.TextField(unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RunPython(copy_users),
    ]
